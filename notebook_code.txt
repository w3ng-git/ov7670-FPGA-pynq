from pynq import Overlay
from pynq.lib.iic import AxiIIC
import time

overlay  = Overlay("runs/camera_design.bit")        # 已下载比特流




from pynq import MMIO
# SCCB控制器地址
SCCB_BASE = 0x40001000
sccb_mmio = MMIO(SCCB_BASE, 0x1000)

# 摄像头控制器地址（已更改）
CAMERA_CTRL_BASE = 0x40000000
camera_mmio = MMIO(CAMERA_CTRL_BASE, 0x1000)







# 摄像头初始化步骤
# Step 1：确保处于掉电状态
camera_mmio.write(0x00, 0x00)    # 禁用 + 掉电
time.sleep(0.02)                 # 等待 ≥5ms

# Step 2：开启摄像头（正常工作模式）
camera_mmio.write(0x00, 0x01)    # 使能 + 电源模式 00
time.sleep(0.05)                 # 等待 ≥10ms 模拟前端稳定






# 开始初始化摄像头
from pynq import Overlay
from sccb_driver import SCCBDriver
import time


sccb = SCCBDriver("SCCB Controller", base_address=0x40001000)
OV7670_ADDR = 0x21
# 色调配置：还是偏蓝
ovc = [
    # ---------- 软复位 ----------
    (0x12, 0x80), ("delay", 10),

    # ---------- 输出格式 RGB565 ----------
    (0x12, 0x04),
    (0x3A, 0x04),
    (0x40, 0xD0),

    # ---------- VGA 640x480 ----------
    (0x17, 0x16), (0x18, 0x04),
    (0x19, 0x02), (0x1A, 0x7B),
    (0x03, 0x06), (0x32, 0x80),

    # ---------- 同步极性 / 镜像 ----------
    (0x15, 0x00),
    (0x1E, 0x07),

    # ---------- 色彩矩阵：正常 RGB 恢复 ----------
    (0x4F, 0xB3),  # R 主
    (0x50, 0xB3),  # R 副
    (0x51, 0x00),  # 交叉项
    (0x52, 0x3D),  # G 主
    (0x53, 0xA7),  # G 副
    (0x54, 0xE4),  # B 主
    (0x58, 0x9E),  # 矩阵符号控制

    # ---------- 增益限制 + 自动控制 ----------
    (0x14, 0x6A),
    (0x13, 0xE7),
    (0x3D, 0xC2),
]

# ov test config: 彩条测试：通过
ovt = [
    (0x12, 0x80),         # 软件复位
    ("delay", 10),

    (0x11, 0x01),         # 时钟分频
    (0x6B, 0x00),         # PLL off

    (0x12, 0x04),         # RGB输出模式
    (0x40, 0xD0),         # RGB565 + full range

    (0x3A, 0x04),         # 正常输出顺序
    (0x70, 0x80),         # 开启彩条测试
    (0x71, 0x81),
]


for reg, val in ovc:
    if reg == "delay":
        time.sleep(val / 1000)  # 毫秒延时
    else:
        sccb.write_byte(OV7670_ADDR, reg, val)
        time.sleep(0.003)       # 写后留 3ms，保险

# sccb.read_byte(OV7670_ADDR, 0x40) # cesh 








# vdma控制器配置
from vdma_ov7670 import vdma_setup_for_ov7670_rgba
import time, matplotlib.pyplot as plt
import numpy as np

fb, vdma = vdma_setup_for_ov7670_rgba(overlay, vdma_base=0x43000000,
                                      width=640, height=480)

# print("VDMA running… capturing RGBA frame")
time.sleep(0.1)







# vdma获取图片
# 缓存同步
if   hasattr(fb, "invalidate_cache"): fb.invalidate_cache()
elif hasattr(fb, "invalidate"):       fb.invalidate()
else:                                 fb.sync_from_device()
    
print(fb.view(dtype=np.uint8).shape)


# 转换 view

rgba = fb.view(dtype=np.uint8).reshape((480, 640, 4))

# 可选：如果 Alpha 通道恒为 0 或 255，可忽略
rgb = rgba[..., [2,1,3] ]     # 新顺序,因为Video DMA是小端序

plt.imshow(rgb)
plt.title("OV7670 Frame (640×480 RGBA8888)")
plt.axis('off')
plt.show()






# 以前的测试代码 

# from pynq import Overlay
# from sccb_driver import SCCBDriver
# import time

# # 尝试自动获取SCCB控制器实例，如果失败则手动创建
# # 如果自动绑定失败，使用手动方式（替换基地址）
# sccb = SCCBDriver("SCCB Controller", base_address=0x40001000)

# # OV7670 SCCB地址是0x21（7位地址）
# OV7670_ADDR = 0x21

# # 读取OV7670的产品ID寄存器（地址0x0A）应返回0x76
# reg_addr = 0x0a
# product_id = sccb.read_byte(OV7670_ADDR, reg_addr)
# print(f"OV7670 Product ID: 0x{product_id:02X} (应为0x76)")

# # 简单读写测试：向测试寄存器写入值然后读回
# test_reg = 0x3a  # 
# test_value = 0x4  # 

# # 写入测试值
# sccb.write_byte(OV7670_ADDR, test_reg, test_value)

# # 读回测试值
# read_value = sccb.read_byte(OV7670_ADDR, test_reg)
# print(f"写入值: 0x{test_value:02X}, 读回值: 0x{read_value:02X}")
# print(f"测试结果: {'成功' if test_value == read_value else '失败'}")








# # 检查所有IP及其地址
# print("比特流中的所有IP地址信息:")
# print("-" * 60)
# print(f"{'IP名称':<30} {'基址':<15} {'高址':<15}")
# print("-" * 60)

# # 列出overlay中的所有IP
# for ip_name, ip_dict in overlay.ip_dict.items():
#     if 'phys_addr' in ip_dict:
#         base_addr = ip_dict['phys_addr']
#         addr_range = ip_dict.get('addr_range', 0)
#         high_addr = base_addr + addr_range - 1 if addr_range > 0 else base_addr
#         print(f"{ip_name:<30} 0x{base_addr:08x}    0x{high_addr:08x}")

# print("-" * 60)
# print("\n当前使用的地址:")
# print(f"SCCB控制器地址: 0x{SCCB_BASE:08x}")
# print(f"摄像头控制器地址: 0x{CAMERA_CTRL_BASE:08x}")
